{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"NeuroportDBS A collection of software developed in the Sachs Lab at the Ottawa Hospital for for deep brain stimulation (DBS) surgery intraoperative mapping with microelectrode recording (MER) using the Blackrock Neuroport. Documentation The documentation is hosted online at https://sachslab.github.io/NeuroportDBS/ . Please use the navigation bar to navigate through the documentation. You may wish to begin with the Introduction . Acknowledgments NeuroportDBS was developed primarily by Drs. Chadwick Boulay and Guillaume Doucet in the Sachs Lab at the Ottawa Hospital Research Institute. This work was funded in part by Canada Foundation for Innovation, the Ottawa Hospital Department of Surgery, the University of Ottawa Brain and Mind Institute, and the University of Ottawa Parkinson Research Consortium. Attribution This tool is described in a manuscript currently under review.","title":"Home"},{"location":"#neuroportdbs","text":"A collection of software developed in the Sachs Lab at the Ottawa Hospital for for deep brain stimulation (DBS) surgery intraoperative mapping with microelectrode recording (MER) using the Blackrock Neuroport.","title":"NeuroportDBS"},{"location":"#documentation","text":"The documentation is hosted online at https://sachslab.github.io/NeuroportDBS/ . Please use the navigation bar to navigate through the documentation. You may wish to begin with the Introduction .","title":"Documentation"},{"location":"#acknowledgments","text":"NeuroportDBS was developed primarily by Drs. Chadwick Boulay and Guillaume Doucet in the Sachs Lab at the Ottawa Hospital Research Institute. This work was funded in part by Canada Foundation for Innovation, the Ottawa Hospital Department of Surgery, the University of Ottawa Brain and Mind Institute, and the University of Ottawa Parkinson Research Consortium.","title":"Acknowledgments"},{"location":"#attribution","text":"This tool is described in a manuscript currently under review.","title":"Attribution"},{"location":"for-developers/","text":"Repository Organization Library and Application code in the /neuroport_dbs folder Unit tests in the /tests folder. Note this uses the pytest framework and conventions. Documentation in the /docs folder Maintaining the Documentation You will need to install several Python packages to maintain the documentation. pip install mkdocs mkdocstrings mknotebooks mkdocs-material Pygments The /docs/{top-level-section} folders contain a mix of .md and .ipynb documentation. The latter are converted to .md by the mknotebooks plugin during building. Run mkdocs gh-deploy to build the documentation, commit to the gh-deploy branch, and push to GitHub. This will make the documentation available at https://SachsLab.github.io/NeuroportDBS/ Here is a great cheat sheet for mkdocs and mkdocstrings syntax. Autogenerated Documentation The /docs/neuroport_dbs folder can hold stubs to tell the mkdocstrings plugin to build the API documentation from the docstrings in the library code itself. Currently this is empty. If any stubs are added then it's necessary to build the documentation from a Python environment that has the package installed. A stub takes the form # Title ::: neuroport_dbs.module.name Testing the documentation locally mkdocs serve If you build the docs locally then you'll also get the /site directory, but this should be git ignored. Running the unit tests TODO Maintaining the Zip Distribution Download the latest WinPython release . These instructions were tested with Winpython64-3.8.5.0 Run the WinPython self-extracting executable. This will create a folder containing a full Python distribution with many useful packages installed (see full list here ). Edit the WPy64-3850\\settings\\winpython.ini file and add the following line: PATH = %WINPYDIR%\\Lib\\site-packages\\PyQt5\\Qt\\bin;%PATH% Download MySQL Windows ZIP Archive Tested with mysql-8.0.2.1-win64.zip Next to the WinPython folder, extract the mysql zip and rename the extracted folder to mysql In the WinPython folder, run \"WinPython Command Prompt\". This will open a Command Prompt with all the paths configured to use this new Python distribution. Install all of the Python packages listed in the table below. Version numbers may not be important. Please try the latest version and report to us if it does not work. The method to install the packages isn't important. If you're on an internet-connected computer then you can use the pip commands. Otherwise you can first download the wheels then bring them to the development computer to pip install the wheels. If you wish to be able to modify any of the SachsLab packages that are pure python (mspacman, cerebuswrapper, serf, neuroport_dbs ) then you may do so by first cloning the repository to get the source and installing the package in-place: Using the WinPython command prompt, run pip install -e . from within the cloned directory. The cerebus package may complain \"DLL load failed\". This happens when cerebus.cbpy can't find Qt5 or it finds the wrong version. This SHOULD be fixed by editing the PATH in the 3rd step above, but I also found it necessary to copy Qt5Core.dll and Qt5Xml.dll from the above path directly into the site-packages\\cerebus folder. We hope to remove the qt dependency from cerebus to avoid this in the future. In the command prompt, cd into the bin subfolder of the unzipped mysql folder. Create a mysql\\data folder along with the base databases: mysqld --initialize-insecure --console You can change the default data directory, username, and password. See the section below \"Configuring MySQL Database Server\" Double-click on the mysqld executable in the bin folder. Back in the command prompt, run mysqladmin --user=root create serf Install the serf databases with the following commands: serf-makemigrations serf-migrate Make a batch file WPy64-3850\\scripts\\NeuroportDBS.bat with the following contents: shell script @echo off call \"%~dp0env_for_icons.bat\" start \"\" \"%WINPYDIR%\\Scripts\\dbs-sweep.exe\" /command:%1 /B start \"\" \"%WINPYDIR%\\Scripts\\dbs-raster.exe\" /command:%1 /B start \"\" \"%WINPYDIR%\\Scripts\\dbs-waveform.exe\" /command:%1 /B start \"\" \"%WINPYDIR%\\Scripts\\dbs-ddu.exe\" /command:%1 /B start \"\" \"%WINPYDIR%\\Scripts\\dbs-features.exe\" /command:%1 /B Jump ahead to Usage Instructions below. Required Python Packages Package Version Wheel pip command pyFFTW 0.12.0 Link mysqlclient 2.0.1 Link Django 3.1 Link quantities 0.12.4 python-neo 0.9.0 pip install git+https://github.com/NeuralEnsemble/python-neo.git pylsl 1.13.6 Link pytf 0.1 Link pip install git+https://github.com/SachsLab/pytf.git mspacman 0.1 Link pip install git+https://github.com/SachsLab/mspacman.git cerebus 0.0.4 Link N/A - must use wheel cerebuswrapper 0.1 Link pip install git+https://github.com/SachsLab/cerebuswrapper.git serf 1.1 Link pip install git+https://github.com/cboulay/SERF.git#subdirectory=python neurport_dbs 1.0 Link pip install git+https://github.com/SachsLab/NeuroportDBS.git Configuring MySQL Database Server If you wish to use a different datadir then you must first create a my.cnf file in the root mysql folder with the following contents (commented out lines aren't necessary, just keeping them here for reference): [mysqld] datadir=path/to/data #port = 3306 #socket = /tmp/mysql.sock #pid-file = /Volumes/STORE/eerfdata/Chadwicks-MacBook-Pro.local.pid #default-storage-engine = MyISAM #default_tmp_storage_engine = MyISAM #query_cache_type = 1 #key_buffer_size = 2G #query_cache_limit = 400M If you wish to secure the database then you'll need to give the root account a password. Do so with mysql_secure_installation . If you change from the default username ( root ) and password (none) then you will have to tell serf what the username and password are. Create a file named my_serf.cnf and put it in the path identified by the following command: python -c \"import os; print(os.path.expanduser('~'))\" The file contents should be [client] user = root password = {password} #port = 3306 #socket = /tmp/mysql.sock For experts who want to use their existing environment We assume you know how to work with conda environments and that you have a MySQL database server running and configured to your liking. Install the Python packages from the table above. Adapt the instructions at Segmented Electrophys Recordings and Features Database (SERF) to prepare the database server for these tools. If you have a hybrid distribution/system-MySQL environment (i.e., your name is Guillaume) then you may also wish to use some of the MySQL DB config settings from above.","title":"For Developers"},{"location":"for-developers/#repository-organization","text":"Library and Application code in the /neuroport_dbs folder Unit tests in the /tests folder. Note this uses the pytest framework and conventions. Documentation in the /docs folder","title":"Repository Organization"},{"location":"for-developers/#maintaining-the-documentation","text":"You will need to install several Python packages to maintain the documentation. pip install mkdocs mkdocstrings mknotebooks mkdocs-material Pygments The /docs/{top-level-section} folders contain a mix of .md and .ipynb documentation. The latter are converted to .md by the mknotebooks plugin during building. Run mkdocs gh-deploy to build the documentation, commit to the gh-deploy branch, and push to GitHub. This will make the documentation available at https://SachsLab.github.io/NeuroportDBS/ Here is a great cheat sheet for mkdocs and mkdocstrings syntax.","title":"Maintaining the Documentation"},{"location":"for-developers/#autogenerated-documentation","text":"The /docs/neuroport_dbs folder can hold stubs to tell the mkdocstrings plugin to build the API documentation from the docstrings in the library code itself. Currently this is empty. If any stubs are added then it's necessary to build the documentation from a Python environment that has the package installed. A stub takes the form # Title ::: neuroport_dbs.module.name","title":"Autogenerated Documentation"},{"location":"for-developers/#testing-the-documentation-locally","text":"mkdocs serve If you build the docs locally then you'll also get the /site directory, but this should be git ignored.","title":"Testing the documentation locally"},{"location":"for-developers/#running-the-unit-tests","text":"TODO","title":"Running the unit tests"},{"location":"for-developers/#maintaining-the-zip-distribution","text":"Download the latest WinPython release . These instructions were tested with Winpython64-3.8.5.0 Run the WinPython self-extracting executable. This will create a folder containing a full Python distribution with many useful packages installed (see full list here ). Edit the WPy64-3850\\settings\\winpython.ini file and add the following line: PATH = %WINPYDIR%\\Lib\\site-packages\\PyQt5\\Qt\\bin;%PATH% Download MySQL Windows ZIP Archive Tested with mysql-8.0.2.1-win64.zip Next to the WinPython folder, extract the mysql zip and rename the extracted folder to mysql In the WinPython folder, run \"WinPython Command Prompt\". This will open a Command Prompt with all the paths configured to use this new Python distribution. Install all of the Python packages listed in the table below. Version numbers may not be important. Please try the latest version and report to us if it does not work. The method to install the packages isn't important. If you're on an internet-connected computer then you can use the pip commands. Otherwise you can first download the wheels then bring them to the development computer to pip install the wheels. If you wish to be able to modify any of the SachsLab packages that are pure python (mspacman, cerebuswrapper, serf, neuroport_dbs ) then you may do so by first cloning the repository to get the source and installing the package in-place: Using the WinPython command prompt, run pip install -e . from within the cloned directory. The cerebus package may complain \"DLL load failed\". This happens when cerebus.cbpy can't find Qt5 or it finds the wrong version. This SHOULD be fixed by editing the PATH in the 3rd step above, but I also found it necessary to copy Qt5Core.dll and Qt5Xml.dll from the above path directly into the site-packages\\cerebus folder. We hope to remove the qt dependency from cerebus to avoid this in the future. In the command prompt, cd into the bin subfolder of the unzipped mysql folder. Create a mysql\\data folder along with the base databases: mysqld --initialize-insecure --console You can change the default data directory, username, and password. See the section below \"Configuring MySQL Database Server\" Double-click on the mysqld executable in the bin folder. Back in the command prompt, run mysqladmin --user=root create serf Install the serf databases with the following commands: serf-makemigrations serf-migrate Make a batch file WPy64-3850\\scripts\\NeuroportDBS.bat with the following contents: shell script @echo off call \"%~dp0env_for_icons.bat\" start \"\" \"%WINPYDIR%\\Scripts\\dbs-sweep.exe\" /command:%1 /B start \"\" \"%WINPYDIR%\\Scripts\\dbs-raster.exe\" /command:%1 /B start \"\" \"%WINPYDIR%\\Scripts\\dbs-waveform.exe\" /command:%1 /B start \"\" \"%WINPYDIR%\\Scripts\\dbs-ddu.exe\" /command:%1 /B start \"\" \"%WINPYDIR%\\Scripts\\dbs-features.exe\" /command:%1 /B Jump ahead to Usage Instructions below.","title":"Maintaining the Zip Distribution"},{"location":"for-developers/#required-python-packages","text":"Package Version Wheel pip command pyFFTW 0.12.0 Link mysqlclient 2.0.1 Link Django 3.1 Link quantities 0.12.4 python-neo 0.9.0 pip install git+https://github.com/NeuralEnsemble/python-neo.git pylsl 1.13.6 Link pytf 0.1 Link pip install git+https://github.com/SachsLab/pytf.git mspacman 0.1 Link pip install git+https://github.com/SachsLab/mspacman.git cerebus 0.0.4 Link N/A - must use wheel cerebuswrapper 0.1 Link pip install git+https://github.com/SachsLab/cerebuswrapper.git serf 1.1 Link pip install git+https://github.com/cboulay/SERF.git#subdirectory=python neurport_dbs 1.0 Link pip install git+https://github.com/SachsLab/NeuroportDBS.git","title":"Required Python Packages"},{"location":"for-developers/#configuring-mysql-database-server","text":"If you wish to use a different datadir then you must first create a my.cnf file in the root mysql folder with the following contents (commented out lines aren't necessary, just keeping them here for reference): [mysqld] datadir=path/to/data #port = 3306 #socket = /tmp/mysql.sock #pid-file = /Volumes/STORE/eerfdata/Chadwicks-MacBook-Pro.local.pid #default-storage-engine = MyISAM #default_tmp_storage_engine = MyISAM #query_cache_type = 1 #key_buffer_size = 2G #query_cache_limit = 400M If you wish to secure the database then you'll need to give the root account a password. Do so with mysql_secure_installation . If you change from the default username ( root ) and password (none) then you will have to tell serf what the username and password are. Create a file named my_serf.cnf and put it in the path identified by the following command: python -c \"import os; print(os.path.expanduser('~'))\" The file contents should be [client] user = root password = {password} #port = 3306 #socket = /tmp/mysql.sock","title":"Configuring MySQL Database Server"},{"location":"for-developers/#for-experts-who-want-to-use-their-existing-environment","text":"We assume you know how to work with conda environments and that you have a MySQL database server running and configured to your liking. Install the Python packages from the table above. Adapt the instructions at Segmented Electrophys Recordings and Features Database (SERF) to prepare the database server for these tools. If you have a hybrid distribution/system-MySQL environment (i.e., your name is Guillaume) then you may also wish to use some of the MySQL DB config settings from above.","title":"For experts who want to use their existing environment"},{"location":"getting-started/","text":"Our primary method of distributing the full NeuroportDBS Suite is as a giant zip file. TODO: Link! If you want to setup the individual pieces on an internet-connected computer (e.g., for development or testing) then please look at the For Developers documentation. It is expected that the target computer is a Windows computer that has a dedicated network connection to the NSP, such as the Blackrock-provided PC. Testing without the NSP is also possible (see below). Extract the zip file to the target computer. A lot of disk space is required because the data segments will be saved within. Updates may come in the form of a smaller zip file to extract within a specific subfolder of the extracted distribution. Proceed with the Usage Instructions Test Environment - Without NSP Run \"C:\\Program Files (x86)\\Blackrock Microsystems\\NeuroPort Windows Suite\\runNPlayAndCentral.bat\" Select a recording to play back Use Central's hardware configuration tool to enable continuous recording and spike extraction on the recorded channels. Follow the general Usage Instructions in the next section with one modification: When running dbs-ddu , choose \"cbsdk playback\" from the dropdown menu to reuse the depths from the recording. The value might not update until the file plays back a change in depth.","title":"Getting Started"},{"location":"getting-started/#test-environment-without-nsp","text":"Run \"C:\\Program Files (x86)\\Blackrock Microsystems\\NeuroPort Windows Suite\\runNPlayAndCentral.bat\" Select a recording to play back Use Central's hardware configuration tool to enable continuous recording and spike extraction on the recorded channels. Follow the general Usage Instructions in the next section with one modification: When running dbs-ddu , choose \"cbsdk playback\" from the dropdown menu to reuse the depths from the recording. The value might not update until the file plays back a change in depth.","title":"Test Environment - Without NSP"},{"location":"introduction/","text":"Dr. Adam Sachs is a neurosurgeon at the Ottawa Hospital where he and his team implant DBS electrodes to treat motor disorders such as Parkinson's Disease, dystonia, and tremor. Part of the surgical procedure includes microelectrode recording (MER) to map the tissue around the intended DBS target to correct for intrinsic error in the DBS targeting process (i.e., due to imaging, planning, stereotaxy, and brain shift) and to refine the target location. MER requires specialized equipment and software. While all-in-one medical devices are recommended, Dr. Sachs' research requires a more bespoke solution with multipurpose equipment and custom software. The software and some documentation are made available here with the goal of helping other clinician-scientists using the Blackrock Neuroport system for DBS. Equipment A variety of microelectrodes, but mostly FHC Microtargeting Electrodes . Blackrock Neuroport for signal acquisition, processing, and digitization. Blackrock Cerestim for microstimulation. Either the Medtronic Nexdrive or the FHC STar Drive An FHC Depth Digitizing Unit (DDU) - they have similar units for the Nexdrive and STar Drive. Software The Blackrock NSP has its own NeuroPort Central Suite to manage the configuration of the device and to store data. However, its data visualization capabilities are rather limited and not suited for DBS MER. The NSP data stream is accessible via an open source API CereLink which includes a Python interface called cerebus.cbpy . These are maintained by Sachs Lab member Chadwick Boulay. Most of our Neuroport DBS software is written in Python and much of it uses cerebus.cbpy and a custom cerebuswrapper to communicate with the NSP. NeuroportDBS is a Suite of 6 different applications for visualizing signals in real-time: SweepGUI - Plots continuous signals in sweeps, optional high-pass filter, and sonifies a channel. RasterGUI - Plots threshold crossing events in a raster plot, with spike rate displayed in the corner (up to 8 sec history) WaveformGUI - Plots the waveforms of the last N threshold crossing events. DDUGUI visualizes the depth readout from the drive (including adjustable offset value), and sends that depth to the Blackrock NSP as a Comment and also pushes the depth to a labstreaminglayer stream for other processes to retrieve. FeaturesGUI is a much fuller application than the others. It monitors the signals and the depths, then for every new depth it stores a 4-sec segment to a database, and for each segment it calculates a set of predefined features. The depth history of raw segments or features are plotted and updated automatically. The database interaction occurs via a Django app called SERF backed by a MySQL database. CommentGUI (not shown) is for simple text entry widget to send arbitrary comments to the Blackrock NSP. We also use a GUI application we developed called CereStimDBS for controlling the Blackrock CereStim96 in a convenient manner for DBS surgeries.","title":"Introduction"},{"location":"introduction/#equipment","text":"A variety of microelectrodes, but mostly FHC Microtargeting Electrodes . Blackrock Neuroport for signal acquisition, processing, and digitization. Blackrock Cerestim for microstimulation. Either the Medtronic Nexdrive or the FHC STar Drive An FHC Depth Digitizing Unit (DDU) - they have similar units for the Nexdrive and STar Drive.","title":"Equipment"},{"location":"introduction/#software","text":"The Blackrock NSP has its own NeuroPort Central Suite to manage the configuration of the device and to store data. However, its data visualization capabilities are rather limited and not suited for DBS MER. The NSP data stream is accessible via an open source API CereLink which includes a Python interface called cerebus.cbpy . These are maintained by Sachs Lab member Chadwick Boulay. Most of our Neuroport DBS software is written in Python and much of it uses cerebus.cbpy and a custom cerebuswrapper to communicate with the NSP. NeuroportDBS is a Suite of 6 different applications for visualizing signals in real-time: SweepGUI - Plots continuous signals in sweeps, optional high-pass filter, and sonifies a channel. RasterGUI - Plots threshold crossing events in a raster plot, with spike rate displayed in the corner (up to 8 sec history) WaveformGUI - Plots the waveforms of the last N threshold crossing events. DDUGUI visualizes the depth readout from the drive (including adjustable offset value), and sends that depth to the Blackrock NSP as a Comment and also pushes the depth to a labstreaminglayer stream for other processes to retrieve. FeaturesGUI is a much fuller application than the others. It monitors the signals and the depths, then for every new depth it stores a 4-sec segment to a database, and for each segment it calculates a set of predefined features. The depth history of raw segments or features are plotted and updated automatically. The database interaction occurs via a Django app called SERF backed by a MySQL database. CommentGUI (not shown) is for simple text entry widget to send arbitrary comments to the Blackrock NSP. We also use a GUI application we developed called CereStimDBS for controlling the Blackrock CereStim96 in a convenient manner for DBS surgeries.","title":"Software"},{"location":"troubleshooting/","text":"Connectivity If Central is running then these tools should attempt to connect to Central's shared memory, and the network settings are irrelevant. If Central is not running then you'll have to make sure the network settings are correct, and this may depend on how your PC and NSP are connected. The NSP always has the same ip address: 192.168.137.128. I don't think this can be changed, but if it is then you'll have to change that setting in the connect dialog window. If the PC is linked directly to the NSP, then we use the following network adapter settings. In the adapter properties, double click on Internet Protocol Version 4 (TCP/IPv4). Set the IP address to be 192.168.137.1 and the Subnet mask 255.255.255.0. If you require a different IP address then you'll have to change this in the connect dialog window. The client (PC) port defaults to 51002 The client IP address is 192.168.137.1 on Windows, and Mac and Linux use netmasks: 255.255.255.255 on Mac, and 192.168.137.255 on Linux The NSP IP address is 192.168.137.128 and port 51001","title":"Troubleshooting"},{"location":"troubleshooting/#connectivity","text":"If Central is running then these tools should attempt to connect to Central's shared memory, and the network settings are irrelevant. If Central is not running then you'll have to make sure the network settings are correct, and this may depend on how your PC and NSP are connected. The NSP always has the same ip address: 192.168.137.128. I don't think this can be changed, but if it is then you'll have to change that setting in the connect dialog window. If the PC is linked directly to the NSP, then we use the following network adapter settings. In the adapter properties, double click on Internet Protocol Version 4 (TCP/IPv4). Set the IP address to be 192.168.137.1 and the Subnet mask 255.255.255.0. If you require a different IP address then you'll have to change this in the connect dialog window. The client (PC) port defaults to 51002 The client IP address is 192.168.137.1 on Windows, and Mac and Linux use netmasks: 255.255.255.255 on Mac, and 192.168.137.255 on Linux The NSP IP address is 192.168.137.128 and port 51001","title":"Connectivity"},{"location":"usage-instructions/","text":"The NSP must be on. Central should be running. * If you are going to run this on the same computer that is configuring the hardware and that might run Central, Central must be running first. Central will not start after the NeuroportDBS software is already running. * If you are going to run this on a separate computer connected to the NSP over the network, then Central is not technically required except for the FeaturesGUI app. If the FeaturesGUI requirement for Central is problematic for you then please let us know and we will try to remove that dependency. * If you do not have the NSP available then follow the instructions above to setup a test environment. For easier running: * Make a shortcut to mysql\\bin\\mysqld.exe . * Make a shortcut to WPy64-3850\\scripts\\NeuroportDBS.bat First run the mysqld binary by double-clicking its shortcut. Then do the same for the NeuroportDBS batch file. Additional details follow. DDU Choose the COM port the depth digitizer is connected to then click Open. Choosing the wrong serial port may cause the application to hang. Force close then try again. If you are using the batch file to launch then this might mean closing all of the GUI applications and running the batch file again. You can probably identify the correct COM port in Windows Control Panel >Device Manager > Serial & LPT devices. By default, it will automatically stream the depth to both LSL and to the NSP (added to the .nev datafile as comments). You can change this behaviour by unchecking the boxes. If, like us, the depth readout isn't the same as your distance to target, then add an offset. For example, when using a StarDrive with NexFrame, and distance to target it 85.3 mm, and the StarDrive places the microelectrodes 60 mm toward target when the drive reads depth=0, the remaining distance to target is 25.3 mm, so we add an offset of -25.3 . As the drive descends the microelectrodes, and the depth reading increases, the reported distance to target approaches 0 until passes the target then reports positive values. For FHC motor controller V2 : It reports depth in um, so we have to scale the depth reading by 0.001 . The ability to detect which DDU is in use is not implemented in the DDU GUI so we manually edit DDUGUI.py to hard code the scaling. SweepGUI -- RasterGUI -- WaveformGUI These 3 applications share the same simple instructions: First click \"Connect\" to open the NSP connection dialog then OK (assuming defaults are OK). Then click Add Plot to open the window. The connection settings are ignored if Central is running on the same computer, because the default connection method first attempts to connect to Central's shared memory. Sweep Plot Audio The SweepGUI has the ability to stream one of the visualized channels out over the computer's speaker system. You can select which channel is being streamed either by clicking on one of the radio buttons near the top or by using a number on the keyboard (0 for silence, 1-N for each visualized channel). For convenience when using a simple keyboard emulation (e.g. footpad), you may use left-arrow and right-arrow for cycling through the channels, and Space selects silence. Features Click connect, OK, Add Plot Then you're presented with a settings window. Under the Subject tab: Type a patient Id or select from the drop-down list if resuming a previously-stored patient. Enter the remaining information. Under the Procedure tab: Target name (e.g. STN, GPi, Vim) Type: DBS Recording configuration: choose one that matches best. Electrode configuration: This refers to the arrangement of the electrodes in the BenGun when using an array. Choose the one that matches best. Enter Entry and Target coordinates. Also enter Distance to target to confirm. If you record the Nexframe orientation by recordings its A and E locations then enter them here. TODO: use perfectly-aligned values as defaults. If you use an offset adapter you can specify the direction (A to H) and the offset size in mm. Click OK to start the GUI Click on the \"Record\" button. Note: To change the default recording path, edit WPy64-3850\\python-3.8.5.amd64\\Lib\\site-packages\\neuroport_dbs\\settings\\defaults.py and change the BASEPATH value. (We hope to make this easier via a config file in the future.) After a new depth is entered and the depth remains constant for 4-8 seconds (depending on signal quality), a segment will be added to the database. The current trajectory that is visualized is by default synchronized with the Sweep GUI selection for audio. To change which trajectory is being visualized, you can change which channel you are listening to in SweepGUI, or uncheck the synchronize box and set the channel manually.","title":"Usage Instructions"},{"location":"usage-instructions/#ddu","text":"Choose the COM port the depth digitizer is connected to then click Open. Choosing the wrong serial port may cause the application to hang. Force close then try again. If you are using the batch file to launch then this might mean closing all of the GUI applications and running the batch file again. You can probably identify the correct COM port in Windows Control Panel >Device Manager > Serial & LPT devices. By default, it will automatically stream the depth to both LSL and to the NSP (added to the .nev datafile as comments). You can change this behaviour by unchecking the boxes. If, like us, the depth readout isn't the same as your distance to target, then add an offset. For example, when using a StarDrive with NexFrame, and distance to target it 85.3 mm, and the StarDrive places the microelectrodes 60 mm toward target when the drive reads depth=0, the remaining distance to target is 25.3 mm, so we add an offset of -25.3 . As the drive descends the microelectrodes, and the depth reading increases, the reported distance to target approaches 0 until passes the target then reports positive values. For FHC motor controller V2 : It reports depth in um, so we have to scale the depth reading by 0.001 . The ability to detect which DDU is in use is not implemented in the DDU GUI so we manually edit DDUGUI.py to hard code the scaling.","title":"DDU"},{"location":"usage-instructions/#sweepgui-rastergui-waveformgui","text":"These 3 applications share the same simple instructions: First click \"Connect\" to open the NSP connection dialog then OK (assuming defaults are OK). Then click Add Plot to open the window. The connection settings are ignored if Central is running on the same computer, because the default connection method first attempts to connect to Central's shared memory.","title":"SweepGUI -- RasterGUI -- WaveformGUI"},{"location":"usage-instructions/#sweep-plot-audio","text":"The SweepGUI has the ability to stream one of the visualized channels out over the computer's speaker system. You can select which channel is being streamed either by clicking on one of the radio buttons near the top or by using a number on the keyboard (0 for silence, 1-N for each visualized channel). For convenience when using a simple keyboard emulation (e.g. footpad), you may use left-arrow and right-arrow for cycling through the channels, and Space selects silence.","title":"Sweep Plot Audio"},{"location":"usage-instructions/#features","text":"Click connect, OK, Add Plot Then you're presented with a settings window. Under the Subject tab: Type a patient Id or select from the drop-down list if resuming a previously-stored patient. Enter the remaining information. Under the Procedure tab: Target name (e.g. STN, GPi, Vim) Type: DBS Recording configuration: choose one that matches best. Electrode configuration: This refers to the arrangement of the electrodes in the BenGun when using an array. Choose the one that matches best. Enter Entry and Target coordinates. Also enter Distance to target to confirm. If you record the Nexframe orientation by recordings its A and E locations then enter them here. TODO: use perfectly-aligned values as defaults. If you use an offset adapter you can specify the direction (A to H) and the offset size in mm. Click OK to start the GUI Click on the \"Record\" button. Note: To change the default recording path, edit WPy64-3850\\python-3.8.5.amd64\\Lib\\site-packages\\neuroport_dbs\\settings\\defaults.py and change the BASEPATH value. (We hope to make this easier via a config file in the future.) After a new depth is entered and the depth remains constant for 4-8 seconds (depending on signal quality), a segment will be added to the database. The current trajectory that is visualized is by default synchronized with the Sweep GUI selection for audio. To change which trajectory is being visualized, you can change which channel you are listening to in SweepGUI, or uncheck the synchronize box and set the channel manually.","title":"Features"}]}